openapi: 3.0.3
info:
  title: Gumroad Clone API
  version: 1.0.0
  description: >
    This API is a clone of the Gumroad platform for selling digital products.
    It allows creators to manage products, handle checkouts, process sales, and manage users.
servers:
  - url: http://localhost:3000
security:
  - BearerAuth: []  # Global security requirement; all endpoints require a Bearer token.
paths:
  /products:
    get:
      summary: List all products
      responses:
        '200':
          description: A list of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create a new product
      requestBody:
        description: Product data to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        '201':
          description: Product created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request – Missing or invalid product data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        description: The ID of the product.
        schema:
          type: string
    get:
      summary: Get product details
      responses:
        '200':
          description: Product details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update an existing product
      requestBody:
        description: Updated product details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Updated product.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request – Invalid product data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a product
      responses:
        '204':
          description: Product deleted successfully.
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /checkout:
    post:
      summary: Create a checkout session for a product purchase
      requestBody:
        description: Purchase details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequest'
      responses:
        '201':
          description: Checkout session created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckoutResponse'
        '400':
          description: Bad Request – Missing or invalid checkout data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /sales:
    get:
      summary: List all sales
      responses:
        '200':
          description: A list of sales.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sale'
  /sales/{saleId}:
    parameters:
      - name: saleId
        in: path
        required: true
        description: The ID of the sale.
        schema:
          type: string
    get:
      summary: Get sale details
      responses:
        '200':
          description: Sale details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
        '404':
          description: Sale not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    get:
      summary: List all users
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user (sign up)
      requestBody:
        description: User sign-up details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request – Missing or invalid user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user.
        schema:
          type: string
    get:
      summary: Get user details
      responses:
        '200':
          description: User details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the product.
        title:
          type: string
          description: Title of the product.
        description:
          type: string
          description: Detailed description of the product.
        price:
          type: number
          format: float
          description: Price of the product.
        url:
          type: string
          format: uri
          description: Public URL for the product.
      required:
        - id
        - title
        - price
    NewProduct:
      type: object
      properties:
        title:
          type: string
          description: Title of the product.
        description:
          type: string
          description: Detailed description of the product.
        price:
          type: number
          format: float
          description: Price of the product.
      required:
        - title
        - price
    ProductUpdate:
      type: object
      properties:
        title:
          type: string
          description: Title of the product.
        description:
          type: string
          description: Detailed description of the product.
        price:
          type: number
          format: float
          description: Price of the product.
    CheckoutRequest:
      type: object
      properties:
        productId:
          type: string
          description: The ID of the product to purchase.
        quantity:
          type: integer
          default: 1
          description: Number of units to purchase.
        customerEmail:
          type: string
          format: email
          description: Email address of the customer.
      required:
        - productId
        - customerEmail
    CheckoutResponse:
      type: object
      properties:
        checkoutId:
          type: string
          description: Unique identifier for the checkout session.
        paymentUrl:
          type: string
          format: uri
          description: URL where the customer can complete the payment.
    Sale:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the sale.
        productId:
          type: string
          description: Identifier of the purchased product.
        buyerEmail:
          type: string
          format: email
          description: Email address of the buyer.
        amount:
          type: number
          format: float
          description: Amount paid for the product.
        purchasedAt:
          type: string
          format: date-time
          description: Timestamp when the purchase was made.
      required:
        - id
        - productId
        - buyerEmail
        - amount
        - purchasedAt
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the user.
        email:
          type: string
          format: email
          description: Email address of the user.
        name:
          type: string
          description: Name of the user.
      required:
        - id
        - email
    NewUser:
      type: object
      properties:
        email:
          type: string
          format: email
          description: Email address of the user.
        name:
          type: string
          description: Name of the user.
        password:
          type: string
          description: Password for the account.
      required:
        - email
        - password
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Detailed error message.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
